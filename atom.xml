<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TYC blog</title>
  
  <subtitle>前端探索筆記</subtitle>
  <link href="https://victorlovescoding.github.io/atom.xml" rel="self"/>
  
  <link href="https://victorlovescoding.github.io/"/>
  <updated>2023-06-05T11:50:50.733Z</updated>
  <id>https://victorlovescoding.github.io/</id>
  
  <author>
    <name>Victor Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【JS大哉問#1】淺拷貝(shallow copy) &amp; 深拷貝(deep copy)</title>
    <link href="https://victorlovescoding.github.io/post/"/>
    <id>https://victorlovescoding.github.io/post/</id>
    <published>2023-06-05T10:00:24.000Z</published>
    <updated>2023-06-05T11:50:50.733Z</updated>
    
    <content type="html"><![CDATA[<p>拷貝資料可分為<strong>一般型別的複製 (數字、字串)</strong> ，以及<strong>物件型別的複製 (陣列、物件)</strong> ，在進行一般型別的複製時可以在複製後輕易改動複製來的資料而不會連帶影響原本的資料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=10;</span><br><span class="line">let b=a;</span><br><span class="line">b=99;</span><br><span class="line">console.log(a) //a=10</span><br></pre></td></tr></table></figure><p>但是當我們在做物件的複製時，情況會和一般型別複製不太一樣，先看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=[1,2,3]</span><br><span class="line">let b=a</span><br><span class="line">b[0]=999</span><br><span class="line">console.log(a) //[999,2,3]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;name:&quot;Bob&quot;,age:21,interest:&quot;jogging&quot;&#125;</span><br><span class="line">let b=a</span><br><span class="line">b.name=&quot;Sam&quot;</span><br><span class="line">console.log(a) //&#123;name:&quot;Sam&quot;,age:21,interest:&quot;jogging&quot;&#125;</span><br></pre></td></tr></table></figure><p>可以發現到把複製過來的b資料做修改時，a的資料竟然也跟著改動了<br>因此，當我們在做物件資料的拷貝時，深拷貝和淺拷貝的用意就在於<strong>「即便更動複製過來的資料也不會影響原本的那份資料」</strong></p><h2 id="淺拷貝"><a href="#淺拷貝" class="headerlink" title="淺拷貝"></a>淺拷貝</h2><h3 id="1-其餘運算"><a href="#1-其餘運算" class="headerlink" title="1. 其餘運算"></a>1. 其餘運算</h3><p>可以用 <code>[...要複製的陣列]、&#123;...要複製的物件&#125;</code>的方式來拷貝，這麼一來即便改動複製過來的資料也不會連帶影響到原本的資料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,z:3&#125;</span><br><span class="line">let b=&#123;...a&#125;</span><br><span class="line">b.x=999</span><br><span class="line">console.log(a) // &#123;x: 1, y: 2, z: 3&#125;</span><br></pre></td></tr></table></figure><p>乍看之下好像已經解決了我們原先的問題，但這裡還有一個地雷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,data:&#123;name:&quot;Bob&quot;,age:21,interest:&quot;jogging&quot;&#125;&#125;</span><br><span class="line">let b=&#123;...a&#125;</span><br><span class="line">b.data.name=&quot;Sam&quot;</span><br><span class="line">console.log(a.data.name) //Sam， a的Bob又因為b的改動變成Sam了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="只能拷貝第一層，當我們的資料有第二、第三層以上的時候，還是會因為改動而互相影響，就叫做淺拷貝"><a href="#只能拷貝第一層，當我們的資料有第二、第三層以上的時候，還是會因為改動而互相影響，就叫做淺拷貝" class="headerlink" title="只能拷貝第一層，當我們的資料有第二、第三層以上的時候，還是會因為改動而互相影響，就叫做淺拷貝"></a><em><strong>只能拷貝第一層，當我們的資料有第二、第三層以上的時候，還是會因為改動而互相影響，就叫做淺拷貝</strong></em></h3><h3 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2. Object.assign()"></a>2. Object.assign()</h3><p><code>Object.assign(陣列或物件括號, 要複製的資料)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,z:3&#125;</span><br><span class="line">let b=Object.assign(&#123;&#125;,a)</span><br><span class="line">b.x=999</span><br><span class="line">console.log(a) // &#123;x: 1, y: 2, z: 3&#125;</span><br></pre></td></tr></table></figure><p>但一樣到了第二層的資料就會變成<em>傳址(passing by reference)</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,data:&#123;name:&quot;Bob&quot;,age:21,interest:&quot;jogging&quot;&#125;&#125;</span><br><span class="line">let b=Object.assign(&#123;&#125;,a)</span><br><span class="line">b.data.name=&quot;Sam&quot;</span><br><span class="line">console.log(a.data.name) //Sam， a的Bob又因為b的改動變成Sam了</span><br></pre></td></tr></table></figure><h2 id="深拷貝"><a href="#深拷貝" class="headerlink" title="深拷貝"></a>深拷貝</h2><p>既然淺拷貝只能複製第一層的資料，那深拷貝就是不管有幾層資料都能完整拷貝，且不管怎麼更動複製過來的資料都不影響原本的資料</p><h3 id="1-JSON-stringify-amp-JSON-parse"><a href="#1-JSON-stringify-amp-JSON-parse" class="headerlink" title="1. JSON.stringify() &amp; JSON.parse()"></a>1. JSON.stringify() &amp; JSON.parse()</h3><p><em><strong>先把要複製過來的資料用JSON.stringify字串化，複製完再用JSON.parse變回原本的物件型態</strong></em></p><p><code>JSON.stringify(要複製的物件)</code><br><code>JSON.parse(將複製好的資料物件化)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,data:[1,2,3]&#125;</span><br><span class="line">let b=JSON.stringify(a)</span><br><span class="line">b=JSON.parse(b)</span><br><span class="line">b.data[0]=999</span><br><span class="line">console.log(a.data[0]) //1</span><br></pre></td></tr></table></figure><p>可以發現，經過JSON格式把物件變成字串複製過來再變回物件後，即使將 b 物件所包覆的data的第一筆資料改成 999 ，也不會影響原本 a 物件所包覆的 data 的第一筆的 1</p><h4 id="JSON-stringify-amp-JSON-parse-缺點-複製過來的function無法呼叫"><a href="#JSON-stringify-amp-JSON-parse-缺點-複製過來的function無法呼叫" class="headerlink" title="JSON.stringify() &amp; JSON.parse()缺點: 複製過來的function無法呼叫"></a>JSON.stringify() &amp; JSON.parse()缺點: 複製過來的function無法呼叫</h4><!-- 可以改字串但是函示不能呼叫let a={x:1,y:2,data:function sayHello(){    console.log("HELLO!!")}}let b=JSON.stringify(a)b=JSON.parse(b)b.data=function sayHello(){    console.log("GOOD morning")}console.log(b.data)  --><p>抱錯例子: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,data:function()&#123;</span><br><span class="line">    console.log(&quot;HELLO!!&quot;)</span><br><span class="line">&#125;&#125;</span><br><span class="line">let b=JSON.stringify(a)</span><br><span class="line">b=JSON.parse(b)</span><br><span class="line">console.log(b.data)</span><br><span class="line">b.data() // Uncaught TypeError: b.data is not a function</span><br></pre></td></tr></table></figure><h3 id="2-cloneDeep-引用函式庫"><a href="#2-cloneDeep-引用函式庫" class="headerlink" title="2. _.cloneDeep() 引用函式庫"></a>2. _.cloneDeep() 引用函式庫</h3><p>lodash 是JavaScript的函式庫，裡面提供了一個深拷貝方法，讓拷貝過來的function可以被呼叫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a=&#123;x:1,y:2,data:function()&#123;</span><br><span class="line">    console.log(&quot;HELLO!!&quot;)</span><br><span class="line">&#125;&#125;</span><br><span class="line">let b=_.cloneDeep(a)</span><br><span class="line">b.data() //HELLO!!</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.youtube.com/watch?v=tnT-XbrOKA0&t=892s&ab_channel=%E5%BD%AD%E5%BD%AD%E7%9A%84%E8%AA%B2%E7%A8%8B">JavaScript 物件的淺拷貝、深拷貝 - Front End 網頁前端工程教學</a></li><li><a href="https://lodash.com/docs/4.17.15#cloneDeep">Lodash官方文件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;拷貝資料可分為&lt;strong&gt;一般型別的複製 (數字、字串)&lt;/strong&gt; ，以及&lt;strong&gt;物件型別的複製 (陣列、物件)&lt;/strong&gt; ，在進行一般型別的複製時可以在複製後輕易改動複製來的資料而不會連帶影響原本的資料：&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="JS大哉問" scheme="https://victorlovescoding.github.io/categories/JS%E5%A4%A7%E5%93%89%E5%95%8F/"/>
    
    
    <category term="前端" scheme="https://victorlovescoding.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="淺拷貝" scheme="https://victorlovescoding.github.io/tags/%E6%B7%BA%E6%8B%B7%E8%B2%9D/"/>
    
    <category term="深拷貝" scheme="https://victorlovescoding.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B2%9D/"/>
    
    <category term="JavaScript" scheme="https://victorlovescoding.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【前端踩地雷#1】處理前後端框架的模板衝突(Flask &amp; Vue.js)</title>
    <link href="https://victorlovescoding.github.io/%E3%80%90%E5%89%8D%E7%AB%AF%E8%B8%A9%E5%9C%B0%E9%9B%B7-1%E3%80%91%E8%99%95%E7%90%86Flask%E8%88%87Vue-js%E6%A8%A1%E6%9D%BF%E8%A1%9D%E7%AA%81/"/>
    <id>https://victorlovescoding.github.io/%E3%80%90%E5%89%8D%E7%AB%AF%E8%B8%A9%E5%9C%B0%E9%9B%B7-1%E3%80%91%E8%99%95%E7%90%86Flask%E8%88%87Vue-js%E6%A8%A1%E6%9D%BF%E8%A1%9D%E7%AA%81/</id>
    <published>2023-06-04T13:26:52.000Z</published>
    <updated>2023-06-04T13:59:34.562Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在學Vue框架，打算把它拿來重構原本專案的JavaScript，結果第一步就踩雷XD遇到前後端框架上的模板衝突，決定記錄一下。</p><p>我的專案後端是用Python的框架Flask寫，html檔案放在templates裡面，但當我插入Vue.js的cdn，嘗試要在瀏覽器上印出Hello Vue卻印不出來，打開console.log也沒有跳出甚麼錯誤訊息。</p><p>原本的程式碼:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const &#123; createApp &#125; = Vue;</span><br><span class="line">  createApp(&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &quot;Hello Vue!&quot;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;).mount(&quot;#app&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>後來我把整段code貼給chatgpt，它告訴我有可能是因為Flask的模板引擎Jinja2 和Vue.js的模板引擎都有<code>&#123;&#123; &#125;&#125;</code>的語法，產生衝突所以印不出Hello Vue，也因為語法有重疊導致Flask認為這是正確的語法console裡面不會有錯誤訊息。</p><p>後來問chatGPT得到解決辦法是在createApp裡面加入<code>delimiters: [&quot;[[&quot;, &quot;]]&quot;] </code>，意思是把原本包住變數的兩個大括號改成中括號，不讓兩個框架的語法重疊就解決了。</p><p>修改後:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;[[message]]&lt;/div&gt;</span><br><span class="line">const &#123; createApp &#125; = Vue;</span><br><span class="line">      createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            message: &quot;Hello Vue!&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        delimiters: [&quot;[[&quot;, &quot;]]&quot;],</span><br><span class="line">      &#125;).mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近正在學Vue框架，打算把它拿來重構原本專案的JavaScript，結果第一步就踩雷XD遇到前後端框架上的模板衝突，決定記錄一下。&lt;/p&gt;
&lt;p&gt;我的專案後端是用Python的框架Flask寫，html檔案放在templates裡面，但當我插入Vue.js的cdn，嘗試要</summary>
      
    
    
    
    <category term="前端踩地雷" scheme="https://victorlovescoding.github.io/categories/%E5%89%8D%E7%AB%AF%E8%B8%A9%E5%9C%B0%E9%9B%B7/"/>
    
    
    <category term="前端" scheme="https://victorlovescoding.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Flask" scheme="https://victorlovescoding.github.io/tags/Flask/"/>
    
    <category term="Vue.js" scheme="https://victorlovescoding.github.io/tags/Vue-js/"/>
    
    <category term="模板衝突" scheme="https://victorlovescoding.github.io/tags/%E6%A8%A1%E6%9D%BF%E8%A1%9D%E7%AA%81/"/>
    
  </entry>
  
</feed>
